#include <DallasTemperature.h>// –ø—ñ–¥–∫–ª—é—á–∞–µ–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ 
#include <OneWire.h>
#include "CTBot.h"

#define LIGHT_ON_CALLBACK  "lightON"  //–û–≥–æ–ª–æ—à—É—î–º–æ "–∫–æ–Ω—Å—Ç–∞–Ω—Ç—É" —è–∫–∞ –ø–æ—Ç—ñ–º –ø—Ä–∏ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó
#define LIGHT_OFF_CALLBACK "lightOFF" 
#define Temp "g"
#define Dark "25"
#define Light "50"
#define Lighter "75"
#define Clear "100"
#define Level "lev"
#define Access "acc"

CTBot myBot;// —Ä–æ–±–∏–º–æ –∫–æ–ø—ñ—é –∫–ª–∞—Å–∞ 
CTBotInlineKeyboard myKbd;
CTBotInlineKeyboard myKbd1;
CTBotInlineKeyboard myKbd2; 
CTBotInlineKeyboard myKbd3; 
CTBotInlineKeyboard myKbd4; 

String ssid = "ASUS";     //  –∑–º—ñ–Ω–∞ —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å WIFI SSID
String pass = "1234567890"; // –∑–º—ñ–Ω–∞ —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å WIFI PASSWORD
String token = "900079398:AAEDyh4UHcKIg0-FEFmit2yZeLiY2jEG2F8";   // –∑–º—ñ–Ω–∞ —â–æ –º—ñ—Å—Ç–∏—Ç—å TELEGRAM BOT TOKEN 
uint8_t led = 0;            //–ø—ñ–Ω —Ä–µ–ª–µ   
uint8_t DS18B20 =4 ;            // –ø—ñ–Ω —Ç–µ—Ä–Ω–æ–º–µ—Ç—Ä—É 
OneWire oneWire(DS18B20);
DallasTemperature sensors(&oneWire);


void setup() {
  Serial.begin(115200); //—à–∏–¥–∫—ñ—Å—Ç—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω—è –∑ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º
  Serial.println("Starting TelegramBot...");
  sensors.setResolution(12); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–∞–∑—Ä—è–¥–Ω—ñ—Å—Ç—å —Ç–µ—Ä–Ω–æ–º–∏—Ç—Ä—É –±—ñ—Ç(9-12)
  myBot.wifiConnect(ssid, pass); //–ø—ñ–¥–∫–ª—é—á–∞–º–æ—Å—è –¥–æ WIFI
  myBot.setTelegramToken(token); // –ø—ñ–¥–∫–ª—é—á–∞–µ–º–æ—Å—è –¥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
  if (myBot.testConnection()) // –ø—Ä–æ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω—è –¥–æ —Ç–µ–ª–µ–≥—Ä–∞–º—É
    Serial.println("\ntestConnection OK");
  else
    Serial.println("\ntestConnection NOK");

  pinMode(led, OUTPUT);
  digitalWrite(led, HIGH); //–≤–∫–ª—é—á–∞–µ–º–æ —Ä–µ–ª–µ

  //–æ–ø–∏—Å—É–µ–º–æ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
  myKbd.addButton("ON —Å–≤—ñ—Ç–ª–æ", LIGHT_ON_CALLBACK, CTBotKeyboardButtonQuery);//–∫–Ω–æ–ø–∫–∏ on/off —Å–≤—ñ—Ç–ª–æ
  myKbd.addButton("OFF —Å–≤—ñ—Ç–ª–æ", LIGHT_OFF_CALLBACK, CTBotKeyboardButtonQuery);
  myKbd.addRow(); //–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫ 
  myKbd1.addButton("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",Temp, CTBotKeyboardButtonQuery);// –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–º—ñ—Ä—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
  myKbd.addRow();
  myKbd2.addButton("‚òÅ",Dark, CTBotKeyboardButtonQuery);//–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∏–≥—É–ª—é–≤–∞–Ω—è —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ —Å–≤—ñ—Ç–ª–∞ (25/50/75/100)%
  myKbd2.addButton("‚õÖ",Light, CTBotKeyboardButtonQuery);
  myKbd2.addButton("üå§",Lighter, CTBotKeyboardButtonQuery);
  myKbd2.addButton("‚òÄ",Clear, CTBotKeyboardButtonQuery);
  myKbd2.addRow();
  myKbd3.addButton("–†—ñ–≤–µ–Ω—å –≤–æ–¥–∏",Level, CTBotKeyboardButtonQuery);
  myKbd3.addRow();
  myKbd4.addButton("–î–æ—Å—Ç—É–ø –±–æ—Ç—É",Access, CTBotKeyboardButtonQuery);
  myKbd4.addRow();
 
}

void loop() {
  
  

  // a variable to store telegram message data
  TBMessage msg;
  float temperature;
 

  // if there is an incoming message...
  if (myBot.getNewMessage(msg)) {
    // check what kind of message I received
    if (msg.messageType == CTBotMessageText) {
      // received a text message
      if (msg.text.equalsIgnoreCase("/Keyboar")) {
        // the user is asking to show the inline keyboard --> show it
        myBot.sendMessage(msg.sender.id, "  –°—Ç–∞–Ω —Å–≤—ñ—Ç–ª–∞  ", myKbd ); 
        myBot.sendMessage(msg.sender.id, "–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞", myKbd2 );
         myBot.sendMessage(msg.sender.id, "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É", myKbd1 );
          myBot.sendMessage(msg.sender.id, "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –≤–æ–¥–∏", myKbd3 );
           myBot.sendMessage(msg.sender.id, "–ù–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø", myKbd4 );
        
      }
      else {
        
        myBot.sendMessage(msg.sender.id, "–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≤ –æ–ø–∏—Å—ñ");
      }
    } else if (msg.messageType == CTBotMessageQuery) {
      if (msg.callbackQueryData.equals(LIGHT_ON_CALLBACK)) {
        // pushed "LIGHT ON" button...
        digitalWrite(led, HIGH); // ...turn on the LED (inverted logic!)
        // terminate the callback with an alert message
        myBot.endQuery(msg.callbackQueryID, "—Å–≤—ñ—Ç–ª–æ —É–≤—ñ–º–∫–Ω–∏–Ω–æ", true);
      } else if (msg.callbackQueryData.equals(LIGHT_OFF_CALLBACK)) {
        // pushed "LIGHT OFF" button...
        digitalWrite(led, LOW); // ...turn off the LED (inverted logic!)
        // terminate the callback with a popup message
        myBot.endQuery(msg.callbackQueryID, "–°–≤—ñ—Ç–ª–æ –≤–∏–º–∫–Ω–µ–Ω–æ", true);
      } if (msg.callbackQueryData.equals(Temp)) {
    sensors.requestTemperatures();
        temperature = sensors.getTempCByIndex(0);
         myBot.sendMessage(msg.sender.id, String("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ C:" ));
          myBot.sendMessage(msg.sender.id,String( temperature));
       Serial.print("Temp C: ");
  Serial.println(temperature);
  } if (msg.callbackQueryData.equals(Dark)) {
     analogWrite(5, 64);
        myBot.endQuery(msg.callbackQueryID, "–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞ 25%", true);
    }
     if (msg.callbackQueryData.equals(Light)) {
     analogWrite(5, 127);
        myBot.endQuery(msg.callbackQueryID, "–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å  —Å–≤—ñ—Ç–ª–∞ 50%", true);
    }
     if (msg.callbackQueryData.equals(Lighter)) {
     analogWrite(5, 191);
        myBot.endQuery(msg.callbackQueryID, "–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞ 75%", true);
    }
     if (msg.callbackQueryData.equals(Clear)) {
     analogWrite(5, 255);
        myBot.endQuery(msg.callbackQueryID, "–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å —Å–≤—ñ—Ç–ª–∞ 100%", true);
    }
    if (msg.callbackQueryData.equals(Level)) {
     
        myBot.endQuery(msg.callbackQueryID, "–†—ñ–≤–µ–Ω—å –≤–æ–¥–∏ –≤ –Ω–æ—Ä–º—ñ ", true);
    }
     else if (msg.messageType == CTBotMessageQuery) {
      // received a callback query message
  
     
  }
  
  delay(100);
}}}
